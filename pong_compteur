#!/usr/bin/python3

# Copyright (c) 2017, 2020 Samuel Thibault <samuel.thibault@ens-lyon.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY Samuel Thibault ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#---------------------------------------------------------------------------------------------------------

import sys
import pygame
import socket
import threading, sys, time, os

#----------------------------------------Protocol explication----------------------------------------------

# protocol send data: (entity|x|y$) the "|" for separete the arguments and the "$" for separate the packet ( if you receive multiple packets at once)
# "entity" either "Server" or "Client"

#-------------------------------------------------------------------------------------------------------------------------------------------

ip = ''
port =''
status =''
#racket position ( for updates position adversary racket)
rx = 0
ry = 0
# ball position ( for the client update the position of the ball)
bx = 0
by = 0
#score
ss = 0 # score server
sc = 0 # score client
# just for de main while 
running = True

#--------------------------Class socket_server to create the server---------------------------------------------------------


class socket_server(threading.Thread):
    def __init__(self, ip, port):
        threading.Thread.__init__(self)
        self.ip = ip
        self.port = port


    def start(self):
        # initiate server socket
        self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
        self.conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.conn.bind((self.ip, self.port))
        self.conn.listen(5)
        # start thread
        threading.Thread.start(self)

    # For send packet to the Client
    def send(self, entity, x, y):
        if hasattr(self, 'client_conn'):
            packet = "%s|%d|%d$" % (entity, x, y)
            self.client_conn.send(packet.encode())
        
        
    def run(self):
        # the accept() in the run(self) to not block the thread
        self.client_conn, addr = self.conn.accept()
        while 1:
            time.sleep(0.01)
            # receive data
            datas = self.client_conn.recv(4096)
            # check if the client is disconnected
            if datas == b'':
                self.conn.close()
                global running 
                running = False
            else:
                print(datas)
                datas = datas.decode().split('$')
                for data in datas:
                    # because the split('$') create a empty string 
                    if data == '':
                        continue
                    # for separate the argument data.split('|')
                    data = data.split('|')
                    # in reality, the customer only sends racket information
                    if data[0] == "racket":
                        global rx
                        global ry
                        rx = int(data[1])
                        ry = int(data[2])
            pass

#---------------------------class socket_client to create the client----------------------------------------------------------

class socket_client(threading.Thread):
    def __init__(self, ip, port):
        threading.Thread.__init__(self)
        self.ip = ip
        self.port = port

    def start(self):
        self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print(self.ip)
        self.conn.connect((self.ip, self.port))
        print("Successfull connection")
        threading.Thread.start(self)

    # for send information to the server
    def send(self, entity, x, y):
        packet = "%s|%d|%d$" % (entity, x, y)
        self.conn.send(packet.encode())
        
    def run(self):
        while 1:
            time.sleep(0.01)
            datas = self.conn.recv(4096)
            # if the connection is off
            if datas == b'':
                self.conn.close()
                global running 
                running = False
            else:
                print(datas)
                datas = datas.decode().split('$')
                for data in datas:
                    if data == '':
                        continue
                    data = data.split('|')
                    # check if is ball, racket or score data
                    #if ball data
                    if data[0] == 'ball':
                        global bx
                        global by
                        bx = int(data[1])
                        by = int(data[2])
                    #if racket data
                    if data[0] == 'racket': 
                        global rx
                        global ry
                        rx = int(data[1])
                        ry = int(data[2])
                        #if score data
                    if data[0] == 'score':
                        global ss
                        global sc
                        ss = int(data[1])
                        sc = int(data[2])
                        print(ss)
                        print(sc)

#---------------------------------------------------------------------------------------           

#--------------------Choice of client-serveur mode -------------------------------------
#Number of arguments
nb_arg = len(sys.argv)
#Testing arguments and choosing the type of connection
#if there is more than one argument
if nb_arg == 1:
    status = input("Server or Client ?\n")
    if status == "Server":
        print ("server mode")
        ip = input("Ip:\n")
        port = int(input("Port:\n"))
        server = socket_server(ip, port)
        server.start()
    elif status == "Client":   
        print("client mode")
        ip = input("Ip:\n")
        port = int(input("Port:\n"))
        client = socket_client(ip, port)
        client.start()
    else:
        exit("no valide mode")
else:
    exit("too many arguments")
#----------------------------------------------------------------------------------------------   

# Screen setup

width = 800
height = 600

clay = (0xFF, 0x40, 0)

ball_speed = [ -2, -2 ]
racket_speed = [ 0, 0 ]

# Pygame initialization
pygame.init()
screen = pygame.display.set_mode( (width, height) )

fontscore = pygame.font.SysFont(None, 50)

# Load resources
ball = pygame.image.load("image/ball.png")
ball_coords = ball.get_rect()

racket = pygame.image.load("image/racket.png")
racket_coords = racket.get_rect()

racket2 = pygame.image.load("image/racket.png")
racket2_coords = racket2.get_rect()

# Throw ball from center
def throw():
    ball_coords.left = 2*width/3
    ball_coords.top = height/2

# Position the adversary's racket
def coordracket2():
    racket2_coords.right = width

coordracket2()
throw()

while running:

    for e in pygame.event.get():
        # Check for exit
        if e.type == pygame.QUIT:
            sys.exit()

        # Check for racket movements
        if e.type == pygame.KEYDOWN:
            if e.key == pygame.K_UP:
                racket_speed[1] = -4
                pass
            elif e.key == pygame.K_DOWN:
                racket_speed[1] = 4
                pass
        elif e.type == pygame.KEYUP:
            if e.key == pygame.K_UP:
                racket_speed[1] = 0
                pass
            elif e.key == pygame.K_DOWN:
                racket_speed[1] = 0
                pass
        

    # Move ball
    # The server takes care of moving the ball
    if status == "Server":
        ball_coords = ball_coords.move(ball_speed)
        # Bounce ball on walls
        if ball_coords.left < 0 or ball_coords.right >= width:
            ball_speed[0] = -ball_speed[0]
        if ball_coords.top < 0 or ball_coords.bottom >= height:
            ball_speed[1] = -ball_speed[1]
        server.send('ball', ball_coords.centerx, ball_coords.centery)
    else:
        # Tle client updates the position of the ball with the information received from the server
        ball_coords.center = (bx, by)
    
    if status == "Server":
        # Move racket Server
        racket_coords = racket_coords.move(racket_speed)

        # Clip racket on court
        if racket_coords.left < 0:
            racket_coords.left = 0
        elif racket_coords.right >= width:
            racket_coords.right = width-1
        if racket_coords.top < 0:
            racket_coords.top = 0
        elif racket_coords.bottom >= height:
            racket_coords.bottom = height-1

        # move adversary's racket (Client)
        racket2_coords.center = (rx, ry)

        # Server send racket information to the Client
        server.send('racket', racket_coords.centerx, racket_coords.centery)
    else:
        # Move racket Client
        racket2_coords = racket2_coords.move(racket_speed)

        # Clip racket Client on court
        if racket2_coords.left < 0:
            racket2_coords.left = 0
        elif racket_coords.right >= width:
            racket2_coords.right = width-1
        if racket2_coords.top < 0:
            racket2_coords.top = 0
        elif racket2_coords.bottom >= height:
            racket2_coords.bottom = height-1

        # Move Adversary's racket (server)
        racket_coords.center = (rx, ry)
        
        # Send racket information to the server
        client.send('racket', racket2_coords.centerx, racket2_coords.centery)

    # Racket reached racket position?
    if status == 'Server':
        if ball_coords.left <= 0:
            if ball_coords.bottom <= racket_coords.top or ball_coords.top >= racket_coords.bottom:
                print(" Server lost!")
                sc += 1
                server.send('score', ss, sc)
                throw()
        if ball_coords.right >=width:
            if ball_coords.bottom <= racket2_coords.top or ball_coords.top >= racket2_coords.bottom:
                print ('Client lost!')
                ss += 1
                server.send('score', ss, sc)
                pass
                throw()

    # score
    textscore = fontscore.render(str(ss) + ' | ' + str(sc), True, (255, 255, 255))
    textscore_coords = textscore.get_rect()
    textscore_coords.left = width/2 - textscore_coords.width/2
    textscore_coords.top = 10
    

    # Display everything
    screen.fill(clay)
    screen.blit(ball, ball_coords)
    screen.blit(racket, racket_coords)
    screen.blit(racket2, racket2_coords)
    screen.blit(textscore, textscore_coords)
    pygame.display.flip()


    # sleep 10ms, since there is no need for more than 100Hz refresh :)
    pygame.time.delay(10)

    


